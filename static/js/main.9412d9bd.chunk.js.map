{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","console","log","select","setSelectionRange","navigator","clipboard","writeText","split","join","length","About","myStyle","setMyStyle","btnText","setBtnText","border","Alert","role","msg","App","setMode","alert","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9412d9bd.chunk.js","sourcesContent":["import React from 'react'\nimport  PropTypes from 'prop-types'\nimport { Link } from \"react-router-dom\";\nexport default function Navbar(props) {\n    return (\n        <>\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n                <div className=\"container-fluid\">\n                    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/about\">About</Link>\n                            </li>\n                        </ul>\n                {/* \n                        <form className=\"d-flex\">\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n                        </form> */}\n                \n\n                <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n                </div>\n                    </div>\n                </div>\n            </nav>\n            </>\n            )\n\n} \n\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        //console.log(\"UpperCase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\" , \"Sucess\")\r\n    }\r\n    \r\n    const handleLoClick = ()=>{\r\n        //console.log(\"UpperCase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowerCase!\" , \"Sucess\")\r\n    }\r\n    \r\n    const handleClearClick = ()=>{\r\n        //console.log(\"UpperCase was clicked\" + text);\r\n        let newText ='';\r\n        setText(newText)\r\n        props.showAlert(\"Text are clear!\" , \"Sucess\")\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        //console.log(\"On change\");\r\n        setText(event.target.value)\r\n    }\r\n     \r\n    const handleCopy = () =>{\r\n        var text = document.getElementById(\"myBox\")\r\n        console.log(\"I am copy\")\r\n        text.select();\r\n        text.setSelectionRange(0, 99999);\r\n        navigator.clipboard.writeText(text.value); \r\n    }\r\n   \r\n    const handleExtraSpaces = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText. join(\" \"));\r\n        props.showAlert(\"Extra Spaces Removed\", \"Success\");\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    //text = \"new text\"; -Wrong way to change the state\r\n    //setText(\"new text\"); -Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-4\"> \r\n            <textarea className=\"form-control\" value ={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'042743':'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-dark mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-dark mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-dark mx-2\" onClick={handleClearClick}>Clear the text</button>\r\n            <button className=\"btn btn-dark mx-2\" onClick={handleCopy}>Copy The Text</button>\r\n            <button className=\"btn btn-dark mx-2\" onClick={handleExtraSpaces}> Remove Extra  Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n        <h2 style={{backgroundColor: \"yellow\"}}>Your text </h2>\r\n         <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n         <p>{0.008 * text.split(\" \").length} Minutes need to read</p>\r\n         <h2>Preview</h2>\r\n         <p>{text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  const [myStyle, setMyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n  const toggleStyle = () => {\r\n    if (myStyle.color === \"black\") {\r\n      setMyStyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n        border: \"2px solid black\",\r\n      });\r\n      setBtnText(\"Enable Light Mode\");\r\n    } \r\n    else {\r\n      setMyStyle({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n      });\r\n      setBtnText(\"Enable Dark Mode\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n      <h1 className=\"my-3\">About us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container my-2\">\r\n        <button onClick={toggleStyle} type=\"button\" className=\"btn btn-dark\">\r\n          {btnText}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n     props.Alert&& <div className={`alert alert-${props.Alert.type} alert-dismissible fade show`} role=\"alert\">\r\n       <strong> {props.Alert.type}</strong>:{props.Alert.msg}\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport {} from \"module\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark mode has been enabled\", \"Success\");\n      document.title = \"Take your Notes - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"Success\");\n      document.title = \"Take your Notes - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"Take Notes\" mode={mode} toggleMode={toggleMode} />\n        <Alert Alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            \n            <Route exact path=\"/\">\n            <TextForm showAlert={showAlert} heading=\"Enter the Text to Analyze below\"/>\n            </Route>\n          </Switch>\n          {/* <TextForm showAlert={showAlert} heading=\"Enter the Text to Analyze below\"/> */}\n          {/* <About/> */}\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}